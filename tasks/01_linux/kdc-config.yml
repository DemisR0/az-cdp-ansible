---
- name: KERBEROS - configuration
  hosts: cdpcluster
  become: true

  tasks:
  - name: copy fresh krb5.conf
    copy:
      src: ../../files/krb5_init.conf
      dest: /etc/krb5.conf
      backup: yes

  - name: kerberos - clients config
    lineinfile:
      path: /etc/krb5.conf
      regexp: '{{item.From}}'
      line: '{{item.To}}'
    with_items:
      - { From: ".*default_realm =.*", To: "default_realm = {{ kdc_realm }}"}
      - { From: ".*EXAMPLE.COM = {", To: "{{ kdc_realm }} = {"}
      - { From: ".*kdc = .*", To: "kdc = {{ kdc_server_fqdn }}" }
      - { From: ".*admin_server = .*", To: "admin_server =  {{ kdc_admin_fqdn }}" }
      - { From: ".*}", To: " }" }
      - { From: "# .example.com = EXAMPLE.COM", To: ".{{ kdc_realm_lo }} =  {{ kdc_realm }}" }
      - { From: "# example.com = EXAMPLE.COM", To: "{{ kdc_realm_lo }} =  {{ kdc_realm }}" }
    
  - name: kerberos - check if kdc default database already exist
    stat: 
      path: /var/kerberos/krb5kdc/principal
    register: kdc_file_name
    when: ansible_hostname == kdc_server

  - name: kereberos - create KDC database
    command: kdb5_util create -s -r {{ kdc_realm }} -P {{ kdc_pwd }}
    when: 
      - ansible_hostname == kdc_server
      - kdc_file_name.stat.exists == False
    ignore_errors: yes

  - name: kerberos - make a backup of kdc db
    command: kdb5_util dump
    when: ansible_hostname == kdc_server
    ignore_errors: yes

  - name: kerberos - create admin principal
    command: kadmin.local -r {{ kdc_realm }} -q "addprinc -pw {{ kdc_pwd }} root/admin"
    when: ansible_hostname == kdc_server 

  - name: kerberos - start krb5kdc 
    service: 
      name: krb5kdc 
      state: started
      enabled: yes

  - name: kerberos - start kadmin
    service: 
      name: kadmin
      state: started
      enabled: yes